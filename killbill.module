<?php
/*
 * Copyright 2011-2012 Ning, Inc.
 * Trifon Trifonov 2015
 *
 * Ning licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

include_once dirname(__FILE__) . '/includes/killbill.account.inc';

function killbill_menu() {
    $items = array();

    // Listener API for Killbill push notifications
    $items['killbill/listener/%'] = array(
        'page callback' => 'killbill_process_push_notification',
        'page arguments' => array(2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['killbill/listener/%/%'] = array(
        'page callback' => 'killbill_process_push_notification',
        'page arguments' => array(2, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    // Define administrative menu items
    $items['admin/config/services/killbill'] = array(
        'title' => 'Killbill',
        'description' => 'Configure your Killbill API settings and points of integration with Drupal.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('killbill_settings_form'),
        'access arguments' => array('administer killbill'),
        'file' => 'includes/killbill.admin.inc',
    );
    $items['admin/config/services/killbill/settings'] = array(
        'title' => 'Settings',
        'description' => 'Configure your Killbill API settings and points of integration with Drupal.',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
    );
    $items['admin/config/services/killbill/catalog'] = array(
        'title' => 'Catalog',
        'description' => 'View your Catalog.',
        'page callback' => 'killbill_catalog',
        'access arguments' => array('administer killbill'),
        'type' => MENU_LOCAL_TASK,
        'weight' => -5,
        'file' => 'includes/killbill.admin.inc',
    );

    return $items;
}

function killbill_permission() {
    $permissions = array(
        'administer killbill' => array(
            'title' => t('Administer Killbill'),
            'description' => t('Allows users to configure site-wide Killbill settings and grants access to all integration activities.'),
            'restrict access' => TRUE,
        ),
    );

    return $permissions;
}

function killbill_help($path, $arg) {
}

function killbill_user_view($account, $view_mode, $langcode) {
    if (!$account->uid || !user_access('administer killbill')) {
        return;
    }

    if (!killbill_client_initialize()) {
        return;
    }

    if (!($killbill_account = killbill_retrieve_account($account))) {
        return;
    }

    $account->content['killbill_account'] = array(
        '#type' => 'user_profile_category',
        '#title' => t('Killbill information'),
        '#weight' => 0,
    );

    if (empty($killbill_account->company)) {
        $account_holder = t('@name', array('@name' => $killbill_account->name));
    }
    else {
        $account_holder = t('@name, @company', array('@name' => $killbill_account->name, '@company' => $killbill_account->company));
    }

    $account->content['killbill_account']['account_holder'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Account holder'),
        '#markup' => $account_holder,
    );

    $account->content['killbill_account']['account_email'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Account e-mail address'),
        '#markup' => check_plain($killbill_account->email),
    );

    $account->content['killbill_account']['account_currency'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Account currency'),
        '#markup' => check_plain($killbill_account->currency),
    );

    $account->content['killbill_account']['account_timeZone'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Account time zone'),
        '#markup' => check_plain($killbill_account->timeZone),
    );

    $account->content['killbill_account']['account_kbid'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Killbill account id'),
        '#markup' => check_plain($killbill_account->accountId),
    );
}

// @Trifon
function killbill_user_update(&$edit, $account, $category) {
    if (!$account->uid) {
        return;
    }

    if (!killbill_client_initialize()) {
        return;
    }

//watchdog('kb-user-update', 'account->uid = '. $account->uid, array(), WATCHDOG_INFO); //@Trifon
//watchdog('kb-user-update', 'GLOBALS[user]->uid = '. $GLOBALS['user']->uid, array(), WATCHDOG_INFO); //@Trifon

    if (!($killbill_account = killbill_retrieve_account($account))) {
        return;
    }

    // Set these values for your particular tenant
    $tenant = new Killbill_Tenant();
    $tenant->apiKey    = variable_get('killbill_tenant_api_key', null);
    $tenant->apiSecret = variable_get('killbill_tenant_api_secret', null);

   $killbill_account->email = $account->mail;
    if (property_exists($account, 'timezone')) {
        $killbill_account->timeZone = $account->timezone;
    }

    $killbill_url = variable_get('killbill_server_url', null);
    $killbill_account->update($killbill_url, "DRUPAL", "DRUPAL_HOOK_USER_UPDATE::" . ip_address(), $tenant->getTenantHeaders());
watchdog('kb-user-update', 'Killlbill account updated.', array(), WATCHDOG_INFO); //@Trifon
}

function killbill_user_insert(&$edit, $account, $category) {
    if (!killbill_client_initialize()) {
        return;
} 

function killbill_user_insert(&$edit, $account, $category) {
    if (!killbill_client_initialize()) {
        return;
    }

    // Set these values for your particular tenant
    $tenant = new Killbill_Tenant();
    $tenant->apiKey    = variable_get('killbill_tenant_api_key', null);
    $tenant->apiSecret = variable_get('killbill_tenant_api_secret', null);

    $accountData = new Killbill_Account();
    $accountData->externalKey = $account->uid;
    $accountData->name = $account->name;
    $accountData->email = $account->mail;
    $accountData->currency = 'USD';
    $accountData->paymentMethodId = null;
    $accountData->address1 = null;
    $accountData->address2 = null;
    $accountData->company = null;
    $accountData->state = null;
    $accountData->country = null;
    $accountData->phone = null;
    $accountData->length = strlen($accountData->name);
    if (property_exists($account, 'timezone')) {
        $accountData->timeZone = $account->timezone;
    }

//    global $base_root;
    $killbill_url = variable_get('killbill_server_url', null);

    $accountData->create($killbill_url, "DRUPAL", "DRUPAL_HOOK_USER_INSERT::" . ip_address(), $tenant->getTenantHeaders());
}

/**
 * Processes an incoming push notification.
 *
 * Killbill can be configured to send notifications, e.g. when a new account is created
 * or when a subscription event occurs.
 *
 * By default, this open-source module will listen to these notifications to
 * mirror accounts and subscriptions information in the Drupal database.
 * Other modules can react to incoming push notifications by implementing
 * hook_killbill_process_push_notification(). This can be useful to extend this module
 * and implement business logic reactions specific to your app.
 */
function killbill_process_push_notification($key) {
    $notification = NULL;

    // Ensure the push notification was sent to the proper URL
    if ($key != variable_get('killbill_listener_key', '')) {
        // Log the failed attempt and bail.
        watchdog('killbill', 'Incoming push notification did not contain the proper URL key.', array(), WATCHDOG_WARNING);
        return;
    }

    if (!killbill_client_initialize()) {
        return;
    }

    // TODO - this will probably be json
    $notification = "TODO";

    // Bail if this is an empty or invalid notification
    if (empty($notification)) {
        return;
    }

    // Log the incoming push notification if enabled
    if (variable_get('killbill_push_logging', FALSE)) {
        watchdog('killbill', 'Incoming push notification: !notification', array('!notification' => '<pre>' . check_plain(print_r($notification, TRUE)) . '</pre>'), WATCHDOG_NOTICE);
    }

    module_invoke_all('killbill_process_push_notification', $notification);
}

function killbill_client_initialize($settings = NULL) {
    // If no settings array was given, use the default account settings.
    if (empty($settings)) {
        $settings = array(
            'serverUrl' => variable_get('killbill_server_url', 'http://127.0.0.1:8080'),
            'apiKey' => variable_get('killbill_tenant_api_key', NULL),
            'apiSecret' => variable_get('killbill_tenant_api_secret', NULL),
        );
    }

    if (($path = libraries_get_path('killbill')) && file_exists($path . '/lib/killbill.php')) {
        require_once $path . '/lib/killbill.php';
        Killbill_Client::$serverUrl = $settings['serverUrl'];
//      Killbill_Client::$apiKey = $settings['apiKey'];
//      Killbill_Client::$apiSecret = $settings['apiSecret'];
        Killbill_Client::$apiUser = variable_get('killbill_user_name', null);
        Killbill_Client::$apiPassword = variable_get('killbill_user_pass', null);

        watchdog('killbill', 'Successfully registered the Killbill PHP library.', array(), WATCHDOG_INFO);
        return TRUE;
    }
    else {
        watchdog('killbill', 'Could not find the Killbill PHP client library in sites/all/libraries/killbill.', array(), WATCHDOG_ERROR);
        return FALSE;
    }
}
